// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: user.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	User_AddFollows_FullMethodName      = "/pb.user/AddFollows"
	User_UpdateFollows_FullMethodName   = "/pb.user/UpdateFollows"
	User_DelFollows_FullMethodName      = "/pb.user/DelFollows"
	User_GetFollowsById_FullMethodName  = "/pb.user/GetFollowsById"
	User_SearchFollows_FullMethodName   = "/pb.user/SearchFollows"
	User_AddUserinfo_FullMethodName     = "/pb.user/AddUserinfo"
	User_UpdateUserinfo_FullMethodName  = "/pb.user/UpdateUserinfo"
	User_DelUserinfo_FullMethodName     = "/pb.user/DelUserinfo"
	User_GetUserinfoById_FullMethodName = "/pb.user/GetUserinfoById"
	User_SearchUserinfo_FullMethodName  = "/pb.user/SearchUserinfo"
)

// UserClient is the client API for User service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserClient interface {
	// -----------------------鐢ㄦ埛鍩烘湰淇℃伅-----------------------
	AddFollows(ctx context.Context, in *AddFollowsReq, opts ...grpc.CallOption) (*AddFollowsResp, error)
	UpdateFollows(ctx context.Context, in *UpdateFollowsReq, opts ...grpc.CallOption) (*UpdateFollowsResp, error)
	DelFollows(ctx context.Context, in *DelFollowsReq, opts ...grpc.CallOption) (*DelFollowsResp, error)
	GetFollowsById(ctx context.Context, in *GetFollowsByIdReq, opts ...grpc.CallOption) (*GetFollowsByIdResp, error)
	GetFollowsByFollowId(ctx context.Context, in any, opts ...grpc.CallOption) (any, error)
	SearchFollows(ctx context.Context, in *SearchFollowsReq, opts ...grpc.CallOption) (*SearchFollowsResp, error)
	// -----------------------鐢ㄦ埛鍩烘湰淇℃伅-----------------------
	AddUserinfo(ctx context.Context, in *AddUserinfoReq, opts ...grpc.CallOption) (*AddUserinfoResp, error)
	UpdateUserinfo(ctx context.Context, in *UpdateUserinfoReq, opts ...grpc.CallOption) (*UpdateUserinfoResp, error)
	DelUserinfo(ctx context.Context, in *DelUserinfoReq, opts ...grpc.CallOption) (*DelUserinfoResp, error)
	GetUserinfoById(ctx context.Context, in *GetUserinfoByIdReq, opts ...grpc.CallOption) (*GetUserinfoByIdResp, error)
	SearchUserinfo(ctx context.Context, in *SearchUserinfoReq, opts ...grpc.CallOption) (*SearchUserinfoResp, error)
}

type userClient struct {
	cc grpc.ClientConnInterface
}

func NewUserClient(cc grpc.ClientConnInterface) UserClient {
	return &userClient{cc}
}

func (c *userClient) AddFollows(ctx context.Context, in *AddFollowsReq, opts ...grpc.CallOption) (*AddFollowsResp, error) {
	out := new(AddFollowsResp)
	err := c.cc.Invoke(ctx, User_AddFollows_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UpdateFollows(ctx context.Context, in *UpdateFollowsReq, opts ...grpc.CallOption) (*UpdateFollowsResp, error) {
	out := new(UpdateFollowsResp)
	err := c.cc.Invoke(ctx, User_UpdateFollows_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) DelFollows(ctx context.Context, in *DelFollowsReq, opts ...grpc.CallOption) (*DelFollowsResp, error) {
	out := new(DelFollowsResp)
	err := c.cc.Invoke(ctx, User_DelFollows_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetFollowsById(ctx context.Context, in *GetFollowsByIdReq, opts ...grpc.CallOption) (*GetFollowsByIdResp, error) {
	out := new(GetFollowsByIdResp)
	err := c.cc.Invoke(ctx, User_GetFollowsById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}
func (c *userClient) GetFollowsByFollowId(ctx context.Context, in any, opts ...grpc.CallOption) (any, error) {
	out := new(GetFollowsByIdResp)
	err := c.cc.Invoke(ctx, User_GetFollowsById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) SearchFollows(ctx context.Context, in *SearchFollowsReq, opts ...grpc.CallOption) (*SearchFollowsResp, error) {
	out := new(SearchFollowsResp)
	err := c.cc.Invoke(ctx, User_SearchFollows_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) AddUserinfo(ctx context.Context, in *AddUserinfoReq, opts ...grpc.CallOption) (*AddUserinfoResp, error) {
	out := new(AddUserinfoResp)
	err := c.cc.Invoke(ctx, User_AddUserinfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UpdateUserinfo(ctx context.Context, in *UpdateUserinfoReq, opts ...grpc.CallOption) (*UpdateUserinfoResp, error) {
	out := new(UpdateUserinfoResp)
	err := c.cc.Invoke(ctx, User_UpdateUserinfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) DelUserinfo(ctx context.Context, in *DelUserinfoReq, opts ...grpc.CallOption) (*DelUserinfoResp, error) {
	out := new(DelUserinfoResp)
	err := c.cc.Invoke(ctx, User_DelUserinfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetUserinfoById(ctx context.Context, in *GetUserinfoByIdReq, opts ...grpc.CallOption) (*GetUserinfoByIdResp, error) {
	out := new(GetUserinfoByIdResp)
	err := c.cc.Invoke(ctx, User_GetUserinfoById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) SearchUserinfo(ctx context.Context, in *SearchUserinfoReq, opts ...grpc.CallOption) (*SearchUserinfoResp, error) {
	out := new(SearchUserinfoResp)
	err := c.cc.Invoke(ctx, User_SearchUserinfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServer is the server API for User service.
// All implementations must embed UnimplementedUserServer
// for forward compatibility
type UserServer interface {
	// -----------------------鐢ㄦ埛鍩烘湰淇℃伅-----------------------
	AddFollows(context.Context, *AddFollowsReq) (*AddFollowsResp, error)
	UpdateFollows(context.Context, *UpdateFollowsReq) (*UpdateFollowsResp, error)
	DelFollows(context.Context, *DelFollowsReq) (*DelFollowsResp, error)
	GetFollowsById(context.Context, *GetFollowsByIdReq) (*GetFollowsByIdResp, error)
	SearchFollows(context.Context, *SearchFollowsReq) (*SearchFollowsResp, error)
	// -----------------------鐢ㄦ埛鍩烘湰淇℃伅-----------------------
	AddUserinfo(context.Context, *AddUserinfoReq) (*AddUserinfoResp, error)
	UpdateUserinfo(context.Context, *UpdateUserinfoReq) (*UpdateUserinfoResp, error)
	DelUserinfo(context.Context, *DelUserinfoReq) (*DelUserinfoResp, error)
	GetUserinfoById(context.Context, *GetUserinfoByIdReq) (*GetUserinfoByIdResp, error)
	SearchUserinfo(context.Context, *SearchUserinfoReq) (*SearchUserinfoResp, error)
	mustEmbedUnimplementedUserServer()
}

// UnimplementedUserServer must be embedded to have forward compatible implementations.
type UnimplementedUserServer struct {
}

func (UnimplementedUserServer) AddFollows(context.Context, *AddFollowsReq) (*AddFollowsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFollows not implemented")
}
func (UnimplementedUserServer) UpdateFollows(context.Context, *UpdateFollowsReq) (*UpdateFollowsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFollows not implemented")
}
func (UnimplementedUserServer) DelFollows(context.Context, *DelFollowsReq) (*DelFollowsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelFollows not implemented")
}
func (UnimplementedUserServer) GetFollowsById(context.Context, *GetFollowsByIdReq) (*GetFollowsByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFollowsById not implemented")
}
func (UnimplementedUserServer) SearchFollows(context.Context, *SearchFollowsReq) (*SearchFollowsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchFollows not implemented")
}
func (UnimplementedUserServer) AddUserinfo(context.Context, *AddUserinfoReq) (*AddUserinfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserinfo not implemented")
}
func (UnimplementedUserServer) UpdateUserinfo(context.Context, *UpdateUserinfoReq) (*UpdateUserinfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserinfo not implemented")
}
func (UnimplementedUserServer) DelUserinfo(context.Context, *DelUserinfoReq) (*DelUserinfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelUserinfo not implemented")
}
func (UnimplementedUserServer) GetUserinfoById(context.Context, *GetUserinfoByIdReq) (*GetUserinfoByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserinfoById not implemented")
}
func (UnimplementedUserServer) SearchUserinfo(context.Context, *SearchUserinfoReq) (*SearchUserinfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchUserinfo not implemented")
}
func (UnimplementedUserServer) mustEmbedUnimplementedUserServer() {}

// UnsafeUserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServer will
// result in compilation errors.
type UnsafeUserServer interface {
	mustEmbedUnimplementedUserServer()
}

func RegisterUserServer(s grpc.ServiceRegistrar, srv UserServer) {
	s.RegisterService(&User_ServiceDesc, srv)
}

func _User_AddFollows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFollowsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).AddFollows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_AddFollows_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).AddFollows(ctx, req.(*AddFollowsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UpdateFollows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFollowsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UpdateFollows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_UpdateFollows_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UpdateFollows(ctx, req.(*UpdateFollowsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_DelFollows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelFollowsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).DelFollows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_DelFollows_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).DelFollows(ctx, req.(*DelFollowsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetFollowsById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFollowsByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetFollowsById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_GetFollowsById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetFollowsById(ctx, req.(*GetFollowsByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_SearchFollows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchFollowsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).SearchFollows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_SearchFollows_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).SearchFollows(ctx, req.(*SearchFollowsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_AddUserinfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserinfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).AddUserinfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_AddUserinfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).AddUserinfo(ctx, req.(*AddUserinfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UpdateUserinfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserinfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UpdateUserinfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_UpdateUserinfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UpdateUserinfo(ctx, req.(*UpdateUserinfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_DelUserinfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelUserinfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).DelUserinfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_DelUserinfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).DelUserinfo(ctx, req.(*DelUserinfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetUserinfoById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserinfoByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetUserinfoById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_GetUserinfoById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetUserinfoById(ctx, req.(*GetUserinfoByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_SearchUserinfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchUserinfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).SearchUserinfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_SearchUserinfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).SearchUserinfo(ctx, req.(*SearchUserinfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

// User_ServiceDesc is the grpc.ServiceDesc for User service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var User_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.user",
	HandlerType: (*UserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddFollows",
			Handler:    _User_AddFollows_Handler,
		},
		{
			MethodName: "UpdateFollows",
			Handler:    _User_UpdateFollows_Handler,
		},
		{
			MethodName: "DelFollows",
			Handler:    _User_DelFollows_Handler,
		},
		{
			MethodName: "GetFollowsById",
			Handler:    _User_GetFollowsById_Handler,
		},
		{
			MethodName: "SearchFollows",
			Handler:    _User_SearchFollows_Handler,
		},
		{
			MethodName: "AddUserinfo",
			Handler:    _User_AddUserinfo_Handler,
		},
		{
			MethodName: "UpdateUserinfo",
			Handler:    _User_UpdateUserinfo_Handler,
		},
		{
			MethodName: "DelUserinfo",
			Handler:    _User_DelUserinfo_Handler,
		},
		{
			MethodName: "GetUserinfoById",
			Handler:    _User_GetUserinfoById_Handler,
		},
		{
			MethodName: "SearchUserinfo",
			Handler:    _User_SearchUserinfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}
