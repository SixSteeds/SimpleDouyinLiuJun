// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: user.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	User_AddFollows_FullMethodName            = "/pb.user/AddFollows"
	User_DelFollows_FullMethodName            = "/pb.user/DelFollows"
	User_GetFollowsById_FullMethodName        = "/pb.user/GetFollowsById"
	User_SaveUser_FullMethodName              = "/pb.user/SaveUser"
	User_CheckUser_FullMethodName             = "/pb.user/CheckUser"
	User_GetUserinfoById_FullMethodName       = "/pb.user/GetUserinfoById"
	User_GetUsersByIds_FullMethodName         = "/pb.user/GetUsersByIds"
	User_GetFollowersById_FullMethodName      = "/pb.user/GetFollowersById"
	User_GetFollowersCountById_FullMethodName = "/pb.user/GetFollowersCountById"
	User_CheckIsFollow_FullMethodName         = "/pb.user/CheckIsFollow"
	User_GetFriendsById_FullMethodName        = "/pb.user/GetFriendsById"
	User_GetUserById_FullMethodName           = "/pb.user/GetUserById"
	User_GetUserListByIdList_FullMethodName   = "/pb.user/GetUserListByIdList"
)

// UserClient is the client API for User service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserClient interface {
	AddFollows(ctx context.Context, in *AddFollowsReq, opts ...grpc.CallOption) (*AddFollowsResp, error)
	DelFollows(ctx context.Context, in *DelFollowsReq, opts ...grpc.CallOption) (*DelFollowsResp, error)
	GetFollowsById(ctx context.Context, in *GetFollowsByIdReq, opts ...grpc.CallOption) (*GetFollowsByIdResp, error)
	SaveUser(ctx context.Context, in *SaveUserReq, opts ...grpc.CallOption) (*SaveUserResp, error)
	CheckUser(ctx context.Context, in *CheckUserReq, opts ...grpc.CallOption) (*CheckUserResp, error)
	GetUserinfoById(ctx context.Context, in *GetUserinfoByIdReq, opts ...grpc.CallOption) (*GetUserinfoByIdResp, error)
	GetUsersByIds(ctx context.Context, in *GetUsersByIdsReq, opts ...grpc.CallOption) (*GetUsersByIdsResp, error)
	GetFollowersById(ctx context.Context, in *GetFollowersByIdReq, opts ...grpc.CallOption) (*GetFollowersByIdResp, error)
	GetFollowersCountById(ctx context.Context, in *GetFollowersCountByIdReq, opts ...grpc.CallOption) (*GetFollowersCountByIdResp, error)
	CheckIsFollow(ctx context.Context, in *CheckIsFollowReq, opts ...grpc.CallOption) (*CheckIsFollowResp, error)
	GetFriendsById(ctx context.Context, in *GetFriendsByIdReq, opts ...grpc.CallOption) (*GetFriendsByIdResp, error)
	GetUserById(ctx context.Context, in *GetUserByIdReq, opts ...grpc.CallOption) (*GetUserByIdResp, error)
	GetUserListByIdList(ctx context.Context, in *GetUserListByIdListReq, opts ...grpc.CallOption) (*GetUserListByIdListResp, error)
}

type userClient struct {
	cc grpc.ClientConnInterface
}

func NewUserClient(cc grpc.ClientConnInterface) UserClient {
	return &userClient{cc}
}

func (c *userClient) AddFollows(ctx context.Context, in *AddFollowsReq, opts ...grpc.CallOption) (*AddFollowsResp, error) {
	out := new(AddFollowsResp)
	err := c.cc.Invoke(ctx, User_AddFollows_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) DelFollows(ctx context.Context, in *DelFollowsReq, opts ...grpc.CallOption) (*DelFollowsResp, error) {
	out := new(DelFollowsResp)
	err := c.cc.Invoke(ctx, User_DelFollows_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetFollowsById(ctx context.Context, in *GetFollowsByIdReq, opts ...grpc.CallOption) (*GetFollowsByIdResp, error) {
	out := new(GetFollowsByIdResp)
	err := c.cc.Invoke(ctx, User_GetFollowsById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) SaveUser(ctx context.Context, in *SaveUserReq, opts ...grpc.CallOption) (*SaveUserResp, error) {
	out := new(SaveUserResp)
	err := c.cc.Invoke(ctx, User_SaveUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) CheckUser(ctx context.Context, in *CheckUserReq, opts ...grpc.CallOption) (*CheckUserResp, error) {
	out := new(CheckUserResp)
	err := c.cc.Invoke(ctx, User_CheckUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetUserinfoById(ctx context.Context, in *GetUserinfoByIdReq, opts ...grpc.CallOption) (*GetUserinfoByIdResp, error) {
	out := new(GetUserinfoByIdResp)
	err := c.cc.Invoke(ctx, User_GetUserinfoById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetUsersByIds(ctx context.Context, in *GetUsersByIdsReq, opts ...grpc.CallOption) (*GetUsersByIdsResp, error) {
	out := new(GetUsersByIdsResp)
	err := c.cc.Invoke(ctx, User_GetUsersByIds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetFollowersById(ctx context.Context, in *GetFollowersByIdReq, opts ...grpc.CallOption) (*GetFollowersByIdResp, error) {
	out := new(GetFollowersByIdResp)
	err := c.cc.Invoke(ctx, User_GetFollowersById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetFollowersCountById(ctx context.Context, in *GetFollowersCountByIdReq, opts ...grpc.CallOption) (*GetFollowersCountByIdResp, error) {
	out := new(GetFollowersCountByIdResp)
	err := c.cc.Invoke(ctx, User_GetFollowersCountById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) CheckIsFollow(ctx context.Context, in *CheckIsFollowReq, opts ...grpc.CallOption) (*CheckIsFollowResp, error) {
	out := new(CheckIsFollowResp)
	err := c.cc.Invoke(ctx, User_CheckIsFollow_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetFriendsById(ctx context.Context, in *GetFriendsByIdReq, opts ...grpc.CallOption) (*GetFriendsByIdResp, error) {
	out := new(GetFriendsByIdResp)
	err := c.cc.Invoke(ctx, User_GetFriendsById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetUserById(ctx context.Context, in *GetUserByIdReq, opts ...grpc.CallOption) (*GetUserByIdResp, error) {
	out := new(GetUserByIdResp)
	err := c.cc.Invoke(ctx, User_GetUserById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetUserListByIdList(ctx context.Context, in *GetUserListByIdListReq, opts ...grpc.CallOption) (*GetUserListByIdListResp, error) {
	out := new(GetUserListByIdListResp)
	err := c.cc.Invoke(ctx, User_GetUserListByIdList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServer is the server API for User service.
// All implementations must embed UnimplementedUserServer
// for forward compatibility
type UserServer interface {
	AddFollows(context.Context, *AddFollowsReq) (*AddFollowsResp, error)
	DelFollows(context.Context, *DelFollowsReq) (*DelFollowsResp, error)
	GetFollowsById(context.Context, *GetFollowsByIdReq) (*GetFollowsByIdResp, error)
	SaveUser(context.Context, *SaveUserReq) (*SaveUserResp, error)
	CheckUser(context.Context, *CheckUserReq) (*CheckUserResp, error)
	GetUserinfoById(context.Context, *GetUserinfoByIdReq) (*GetUserinfoByIdResp, error)
	GetUsersByIds(context.Context, *GetUsersByIdsReq) (*GetUsersByIdsResp, error)
	GetFollowersById(context.Context, *GetFollowersByIdReq) (*GetFollowersByIdResp, error)
	GetFollowersCountById(context.Context, *GetFollowersCountByIdReq) (*GetFollowersCountByIdResp, error)
	CheckIsFollow(context.Context, *CheckIsFollowReq) (*CheckIsFollowResp, error)
	GetFriendsById(context.Context, *GetFriendsByIdReq) (*GetFriendsByIdResp, error)
	GetUserById(context.Context, *GetUserByIdReq) (*GetUserByIdResp, error)
	GetUserListByIdList(context.Context, *GetUserListByIdListReq) (*GetUserListByIdListResp, error)
	mustEmbedUnimplementedUserServer()
}

// UnimplementedUserServer must be embedded to have forward compatible implementations.
type UnimplementedUserServer struct {
}

func (UnimplementedUserServer) AddFollows(context.Context, *AddFollowsReq) (*AddFollowsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFollows not implemented")
}
func (UnimplementedUserServer) DelFollows(context.Context, *DelFollowsReq) (*DelFollowsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelFollows not implemented")
}
func (UnimplementedUserServer) GetFollowsById(context.Context, *GetFollowsByIdReq) (*GetFollowsByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFollowsById not implemented")
}
func (UnimplementedUserServer) SaveUser(context.Context, *SaveUserReq) (*SaveUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveUser not implemented")
}
func (UnimplementedUserServer) CheckUser(context.Context, *CheckUserReq) (*CheckUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckUser not implemented")
}
func (UnimplementedUserServer) GetUserinfoById(context.Context, *GetUserinfoByIdReq) (*GetUserinfoByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserinfoById not implemented")
}
func (UnimplementedUserServer) GetUsersByIds(context.Context, *GetUsersByIdsReq) (*GetUsersByIdsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsersByIds not implemented")
}
func (UnimplementedUserServer) GetFollowersById(context.Context, *GetFollowersByIdReq) (*GetFollowersByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFollowersById not implemented")
}
func (UnimplementedUserServer) GetFollowersCountById(context.Context, *GetFollowersCountByIdReq) (*GetFollowersCountByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFollowersCountById not implemented")
}
func (UnimplementedUserServer) CheckIsFollow(context.Context, *CheckIsFollowReq) (*CheckIsFollowResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckIsFollow not implemented")
}
func (UnimplementedUserServer) GetFriendsById(context.Context, *GetFriendsByIdReq) (*GetFriendsByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFriendsById not implemented")
}
func (UnimplementedUserServer) GetUserById(context.Context, *GetUserByIdReq) (*GetUserByIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserById not implemented")
}
func (UnimplementedUserServer) GetUserListByIdList(context.Context, *GetUserListByIdListReq) (*GetUserListByIdListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserListByIdList not implemented")
}
func (UnimplementedUserServer) mustEmbedUnimplementedUserServer() {}

// UnsafeUserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServer will
// result in compilation errors.
type UnsafeUserServer interface {
	mustEmbedUnimplementedUserServer()
}

func RegisterUserServer(s grpc.ServiceRegistrar, srv UserServer) {
	s.RegisterService(&User_ServiceDesc, srv)
}

func _User_AddFollows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFollowsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).AddFollows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_AddFollows_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).AddFollows(ctx, req.(*AddFollowsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_DelFollows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelFollowsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).DelFollows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_DelFollows_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).DelFollows(ctx, req.(*DelFollowsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetFollowsById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFollowsByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetFollowsById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_GetFollowsById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetFollowsById(ctx, req.(*GetFollowsByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_SaveUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).SaveUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_SaveUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).SaveUser(ctx, req.(*SaveUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_CheckUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).CheckUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_CheckUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).CheckUser(ctx, req.(*CheckUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetUserinfoById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserinfoByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetUserinfoById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_GetUserinfoById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetUserinfoById(ctx, req.(*GetUserinfoByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetUsersByIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsersByIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetUsersByIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_GetUsersByIds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetUsersByIds(ctx, req.(*GetUsersByIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetFollowersById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFollowersByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetFollowersById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_GetFollowersById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetFollowersById(ctx, req.(*GetFollowersByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetFollowersCountById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFollowersCountByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetFollowersCountById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_GetFollowersCountById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetFollowersCountById(ctx, req.(*GetFollowersCountByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_CheckIsFollow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckIsFollowReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).CheckIsFollow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_CheckIsFollow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).CheckIsFollow(ctx, req.(*CheckIsFollowReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetFriendsById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFriendsByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetFriendsById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_GetFriendsById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetFriendsById(ctx, req.(*GetFriendsByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetUserById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetUserById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_GetUserById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetUserById(ctx, req.(*GetUserByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetUserListByIdList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserListByIdListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetUserListByIdList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_GetUserListByIdList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetUserListByIdList(ctx, req.(*GetUserListByIdListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// User_ServiceDesc is the grpc.ServiceDesc for User service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var User_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.user",
	HandlerType: (*UserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddFollows",
			Handler:    _User_AddFollows_Handler,
		},
		{
			MethodName: "DelFollows",
			Handler:    _User_DelFollows_Handler,
		},
		{
			MethodName: "GetFollowsById",
			Handler:    _User_GetFollowsById_Handler,
		},
		{
			MethodName: "SaveUser",
			Handler:    _User_SaveUser_Handler,
		},
		{
			MethodName: "CheckUser",
			Handler:    _User_CheckUser_Handler,
		},
		{
			MethodName: "GetUserinfoById",
			Handler:    _User_GetUserinfoById_Handler,
		},
		{
			MethodName: "GetUsersByIds",
			Handler:    _User_GetUsersByIds_Handler,
		},
		{
			MethodName: "GetFollowersById",
			Handler:    _User_GetFollowersById_Handler,
		},
		{
			MethodName: "GetFollowersCountById",
			Handler:    _User_GetFollowersCountById_Handler,
		},
		{
			MethodName: "CheckIsFollow",
			Handler:    _User_CheckIsFollow_Handler,
		},
		{
			MethodName: "GetFriendsById",
			Handler:    _User_GetFriendsById_Handler,
		},
		{
			MethodName: "GetUserById",
			Handler:    _User_GetUserById_Handler,
		},
		{
			MethodName: "GetUserListByIdList",
			Handler:    _User_GetUserListByIdList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}
