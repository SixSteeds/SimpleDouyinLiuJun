// Code generated by goctl. DO NOT EDIT.
// Source: content.proto

package content

import (
	"context"

	"doushen_by_liujun/service/content/rpc/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AddCommentReq                     = pb.AddCommentReq
	AddCommentResp                    = pb.AddCommentResp
	AddFavoriteReq                    = pb.AddFavoriteReq
	AddFavoriteResp                   = pb.AddFavoriteResp
	Comment                           = pb.Comment
	DelCommentReq                     = pb.DelCommentReq
	DelCommentResp                    = pb.DelCommentResp
	DelFavoriteReq                    = pb.DelFavoriteReq
	DelFavoriteResp                   = pb.DelFavoriteResp
	Favorite                          = pb.Favorite
	FeedListReq                       = pb.FeedListReq
	FeedListResp                      = pb.FeedListResp
	FeedUser                          = pb.FeedUser
	FeedVideo                         = pb.FeedVideo
	GetCommentByIdReq                 = pb.GetCommentByIdReq
	GetCommentByIdResp                = pb.GetCommentByIdResp
	GetUserFavoritedCntByIdReq        = pb.GetUserFavoritedCntByIdReq
	GetUserFavoritedCntByIdResp       = pb.GetUserFavoritedCntByIdResp
	GetUserPublishAndLikedCntByIdReq  = pb.GetUserPublishAndLikedCntByIdReq
	GetUserPublishAndLikedCntByIdResp = pb.GetUserPublishAndLikedCntByIdResp
	GetVideoByIdReq                   = pb.GetVideoByIdReq
	GetVideoByIdResp                  = pb.GetVideoByIdResp
	GetVideoListByIdListReq           = pb.GetVideoListByIdListReq
	GetVideoListByIdListResp          = pb.GetVideoListByIdListResp
	GetWorkCountByUserIdReq           = pb.GetWorkCountByUserIdReq
	GetWorkCountByUserIdResp          = pb.GetWorkCountByUserIdResp
	PublishListReq                    = pb.PublishListReq
	PublishListResp                   = pb.PublishListResp
	SearchFavoriteReq                 = pb.SearchFavoriteReq
	SearchFavoriteResp                = pb.SearchFavoriteResp
	UpdateFavoriteReq                 = pb.UpdateFavoriteReq
	UpdateFavoriteResp                = pb.UpdateFavoriteResp
	Video                             = pb.Video

	Content interface {
		AddComment(ctx context.Context, in *AddCommentReq, opts ...grpc.CallOption) (*AddCommentResp, error)
		DelComment(ctx context.Context, in *DelCommentReq, opts ...grpc.CallOption) (*DelCommentResp, error)
		GetCommentById(ctx context.Context, in *GetCommentByIdReq, opts ...grpc.CallOption) (*GetCommentByIdResp, error)
		AddFavorite(ctx context.Context, in *AddFavoriteReq, opts ...grpc.CallOption) (*AddFavoriteResp, error)
		UpdateFavorite(ctx context.Context, in *UpdateFavoriteReq, opts ...grpc.CallOption) (*UpdateFavoriteResp, error)
		DelFavorite(ctx context.Context, in *DelFavoriteReq, opts ...grpc.CallOption) (*DelFavoriteResp, error)
		SearchFavorite(ctx context.Context, in *SearchFavoriteReq, opts ...grpc.CallOption) (*SearchFavoriteResp, error)
		GetVideoById(ctx context.Context, in *GetVideoByIdReq, opts ...grpc.CallOption) (*GetVideoByIdResp, error)
		GetFeedList(ctx context.Context, in *FeedListReq, opts ...grpc.CallOption) (*FeedListResp, error)
		GetPublishList(ctx context.Context, in *PublishListReq, opts ...grpc.CallOption) (*PublishListResp, error)
		GetWorkCountByUserId(ctx context.Context, in *GetWorkCountByUserIdReq, opts ...grpc.CallOption) (*GetWorkCountByUserIdResp, error)
		GetUserFavoritedCnt(ctx context.Context, in *GetUserFavoritedCntByIdReq, opts ...grpc.CallOption) (*GetUserFavoritedCntByIdResp, error)
		GetUserPublishAndLikedCntById(ctx context.Context, in *GetUserPublishAndLikedCntByIdReq, opts ...grpc.CallOption) (*GetUserPublishAndLikedCntByIdResp, error)
		GetVideoListByIdList(ctx context.Context, in *GetVideoListByIdListReq, opts ...grpc.CallOption) (*GetVideoListByIdListResp, error)
	}

	defaultContent struct {
		cli zrpc.Client
	}
)

func NewContent(cli zrpc.Client) Content {
	return &defaultContent{
		cli: cli,
	}
}

func (m *defaultContent) AddComment(ctx context.Context, in *AddCommentReq, opts ...grpc.CallOption) (*AddCommentResp, error) {
	client := pb.NewContentClient(m.cli.Conn())
	return client.AddComment(ctx, in, opts...)
}

func (m *defaultContent) DelComment(ctx context.Context, in *DelCommentReq, opts ...grpc.CallOption) (*DelCommentResp, error) {
	client := pb.NewContentClient(m.cli.Conn())
	return client.DelComment(ctx, in, opts...)
}

func (m *defaultContent) GetCommentById(ctx context.Context, in *GetCommentByIdReq, opts ...grpc.CallOption) (*GetCommentByIdResp, error) {
	client := pb.NewContentClient(m.cli.Conn())
	return client.GetCommentById(ctx, in, opts...)
}

func (m *defaultContent) AddFavorite(ctx context.Context, in *AddFavoriteReq, opts ...grpc.CallOption) (*AddFavoriteResp, error) {
	client := pb.NewContentClient(m.cli.Conn())
	return client.AddFavorite(ctx, in, opts...)
}

func (m *defaultContent) UpdateFavorite(ctx context.Context, in *UpdateFavoriteReq, opts ...grpc.CallOption) (*UpdateFavoriteResp, error) {
	client := pb.NewContentClient(m.cli.Conn())
	return client.UpdateFavorite(ctx, in, opts...)
}

func (m *defaultContent) DelFavorite(ctx context.Context, in *DelFavoriteReq, opts ...grpc.CallOption) (*DelFavoriteResp, error) {
	client := pb.NewContentClient(m.cli.Conn())
	return client.DelFavorite(ctx, in, opts...)
}

func (m *defaultContent) SearchFavorite(ctx context.Context, in *SearchFavoriteReq, opts ...grpc.CallOption) (*SearchFavoriteResp, error) {
	client := pb.NewContentClient(m.cli.Conn())
	return client.SearchFavorite(ctx, in, opts...)
}

func (m *defaultContent) GetVideoById(ctx context.Context, in *GetVideoByIdReq, opts ...grpc.CallOption) (*GetVideoByIdResp, error) {
	client := pb.NewContentClient(m.cli.Conn())
	return client.GetVideoById(ctx, in, opts...)
}

func (m *defaultContent) GetFeedList(ctx context.Context, in *FeedListReq, opts ...grpc.CallOption) (*FeedListResp, error) {
	client := pb.NewContentClient(m.cli.Conn())
	return client.GetFeedList(ctx, in, opts...)
}

func (m *defaultContent) GetPublishList(ctx context.Context, in *PublishListReq, opts ...grpc.CallOption) (*PublishListResp, error) {
	client := pb.NewContentClient(m.cli.Conn())
	return client.GetPublishList(ctx, in, opts...)
}

func (m *defaultContent) GetWorkCountByUserId(ctx context.Context, in *GetWorkCountByUserIdReq, opts ...grpc.CallOption) (*GetWorkCountByUserIdResp, error) {
	client := pb.NewContentClient(m.cli.Conn())
	return client.GetWorkCountByUserId(ctx, in, opts...)
}

func (m *defaultContent) GetUserFavoritedCnt(ctx context.Context, in *GetUserFavoritedCntByIdReq, opts ...grpc.CallOption) (*GetUserFavoritedCntByIdResp, error) {
	client := pb.NewContentClient(m.cli.Conn())
	return client.GetUserFavoritedCnt(ctx, in, opts...)
}

func (m *defaultContent) GetUserPublishAndLikedCntById(ctx context.Context, in *GetUserPublishAndLikedCntByIdReq, opts ...grpc.CallOption) (*GetUserPublishAndLikedCntByIdResp, error) {
	client := pb.NewContentClient(m.cli.Conn())
	return client.GetUserPublishAndLikedCntById(ctx, in, opts...)
}

func (m *defaultContent) GetVideoListByIdList(ctx context.Context, in *GetVideoListByIdListReq, opts ...grpc.CallOption) (*GetVideoListByIdListResp, error) {
	client := pb.NewContentClient(m.cli.Conn())
	return client.GetVideoListByIdList(ctx, in, opts...)
}
