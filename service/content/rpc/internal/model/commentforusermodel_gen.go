// Code generated by goctl. DO NOT EDIT.

package genModel

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	commentForUserFieldNames          = builder.RawFieldNames(&CommentForUser{})
	commentForUserRows                = strings.Join(commentForUserFieldNames, ",")
	commentForUserRowsExpectAutoSet   = strings.Join(stringx.Remove(commentForUserFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	commentForUserRowsWithPlaceHolder = strings.Join(stringx.Remove(commentForUserFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	commentForUserModel interface {
		Insert(ctx context.Context, data *CommentForUser) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*CommentForUser, error)
		Update(ctx context.Context, data *CommentForUser) error
		Delete(ctx context.Context, id int64) error
	}

	defaultCommentForUserModel struct {
		conn  sqlx.SqlConn
		table string
	}

	CommentForUser struct {
		Id        int64 `db:"id"`
		UserId    int64 `db:"user_id"`
		CommentId int64 `db:"comment_id"`
	}
)

func newCommentForUserModel(conn sqlx.SqlConn) *defaultCommentForUserModel {
	return &defaultCommentForUserModel{
		conn:  conn,
		table: "`comment_for_user`",
	}
}

func (m *defaultCommentForUserModel) withSession(session sqlx.Session) *defaultCommentForUserModel {
	return &defaultCommentForUserModel{
		conn:  sqlx.NewSqlConnFromSession(session),
		table: "`comment_for_user`",
	}
}

func (m *defaultCommentForUserModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultCommentForUserModel) FindOne(ctx context.Context, id int64) (*CommentForUser, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", commentForUserRows, m.table)
	var resp CommentForUser
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCommentForUserModel) Insert(ctx context.Context, data *CommentForUser) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, commentForUserRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.UserId, data.CommentId)
	return ret, err
}

func (m *defaultCommentForUserModel) Update(ctx context.Context, data *CommentForUser) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, commentForUserRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.UserId, data.CommentId, data.Id)
	return err
}

func (m *defaultCommentForUserModel) tableName() string {
	return m.table
}
