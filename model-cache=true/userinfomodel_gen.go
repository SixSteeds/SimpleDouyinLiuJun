// Code generated by goctl. DO NOT EDIT.

package model_cache_true

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userinfoFieldNames          = builder.RawFieldNames(&Userinfo{})
	userinfoRows                = strings.Join(userinfoFieldNames, ",")
	userinfoRowsExpectAutoSet   = strings.Join(stringx.Remove(userinfoFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	userinfoRowsWithPlaceHolder = strings.Join(stringx.Remove(userinfoFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	userinfoModel interface {
		Insert(ctx context.Context, data *Userinfo) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Userinfo, error)
		Update(ctx context.Context, data *Userinfo) error
		Delete(ctx context.Context, id int64) error
	}

	defaultUserinfoModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Userinfo struct {
		Id              int64          `db:"id"`               // 主键
		Username        sql.NullString `db:"username"`         // 账号
		Password        sql.NullString `db:"password"`         // 密码
		Avatar          sql.NullString `db:"avatar"`           // 头像
		BackgroundImage sql.NullString `db:"background_image"` // 头像
		Signature       sql.NullString `db:"signature"`        // 个人简介
		CreateTime      time.Time      `db:"create_time"`      // 该条记录创建时间
		UpdateTime      time.Time      `db:"update_time"`      // 该条最后一次更新时间
		IsDelete        int64          `db:"is_delete"`        // 逻辑删除
		Name            sql.NullString `db:"name"`             // 用户昵称
	}
)

func newUserinfoModel(conn sqlx.SqlConn) *defaultUserinfoModel {
	return &defaultUserinfoModel{
		conn:  conn,
		table: "`userinfo`",
	}
}

func (m *defaultUserinfoModel) withSession(session sqlx.Session) *defaultUserinfoModel {
	return &defaultUserinfoModel{
		conn:  sqlx.NewSqlConnFromSession(session),
		table: "`userinfo`",
	}
}

func (m *defaultUserinfoModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultUserinfoModel) FindOne(ctx context.Context, id int64) (*Userinfo, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userinfoRows, m.table)
	var resp Userinfo
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserinfoModel) Insert(ctx context.Context, data *Userinfo) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?)", m.table, userinfoRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.Username, data.Password, data.Avatar, data.BackgroundImage, data.Signature, data.IsDelete, data.Name)
	return ret, err
}

func (m *defaultUserinfoModel) Update(ctx context.Context, data *Userinfo) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, userinfoRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Username, data.Password, data.Avatar, data.BackgroundImage, data.Signature, data.IsDelete, data.Name, data.Id)
	return err
}

func (m *defaultUserinfoModel) tableName() string {
	return m.table
}
