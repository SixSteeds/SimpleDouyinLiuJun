version: '3'

services:

  #prometheus监控 — Prometheus for monitoring
  prometheus:
    image: bitnami/prometheus:2.46.0
    container_name: prometheus
    environment:
      # 时区上海 - Time zone Shanghai (Change if needed)
      TZ: Asia/Shanghai
    volumes:
      - /etc/docker/prometheus/data:/bitnami
    command:
      - '--config.file=/opt/bitnami/prometheus/conf/prometheus.yml'
    restart: always
    user: root
    ports:
      - 9090:9090
    networks:
      - liujun_net

  #查看prometheus监控数据 - Grafana to view Prometheus monitoring data
  grafana:
    image: grafana/grafana:10.0.3
    container_name: grafana
    hostname: grafana
    user: root
    environment:
      # 时区上海 - Time zone Shanghai (Change if needed)
      TZ: Asia/Shanghai
    restart: always
    volumes:
      - /etc/docker/grafana/data:/var/lib/grafana
    ports:
      - 3000:3000
    networks:
      - liujun_net
    depends_on:
      - prometheus


  #消息队列 - Message queue
  kafka:
    image: bitnami/kafka:3.3.2
    container_name: kafka
    ports:
      - 9092:9092
    environment:
      # KRaft settings
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      # Listeners
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
    restart: always
    volumes:
      - /etc/docker/kafka/data:/bitnami
    privileged: true
    user: '1001'
    networks:
      - liujun_net

#  #asynqmon asynq延迟队列、定时队列的webui - Asynqmon asynq delay queue, timing queue's webUI
#  asynqmon:
#    image: hibiken/asynqmon:latest
#    container_name: asynqmon
#    ports:
#      - 8080:8080
#    command:
#      - '--redis-addr=redis:6379'
#      - '--redis-password=liujun'
#    restart: always
#    networks:
#      - liujun_net
#    depends_on:
#      - redis

  #redis容器 - Redis container
  redis:
    image: redis:7.2-rc
    container_name: redis
    ports:
      - 6379:6379
    environment:
      # 时区上海 - Time zone Shanghai (Change if needed)
      TZ: Asia/Shanghai
    volumes:
      # 数据文件 - data files
      - /etc/docker/redis/data:/data:rw
    # AOF持久化
    command: "redis-server --requirepass liujun  --appendonly yes"
    privileged: true
    restart: always
    networks:
      - liujun_net

  mysql:
    image: mysql:8.0.34-debian
    container_name: mysql
    environment:
      # 时区上海 - Time zone Shanghai (Change if needed)
      TZ: Asia/Shanghai
      # root 密码 - root password
      MYSQL_ROOT_PASSWORD: liujun
    ports:
      - 3306:3306
    volumes:
      # 数据挂载 - Data mounting
      - /etc/docker/mysql/data:/var/lib/mysql
      # 日志
    command:
      # 将mysql8.0默认密码策略 修改为 原先 策略 (mysql8.0对其默认策略做了更改 会导致密码无法匹配)
      # Modify the Mysql 8.0 default password strategy to the original strategy (MySQL8.0 to change its default strategy will cause the password to be unable to match)
      --default-authentication-plugin=mysql_native_password
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_general_ci
    restart: always
    networks:
      - liujun_net

  #etcd容器 - Etcd container
  etcd:
    image: bitnami/etcd:3.4.27
    container_name: etcd
    environment:
      # 时区上海 - Time zone Shanghai (Change if needed)
      TZ: Asia/Shanghai
      ALLOW_NONE_AUTHENTICATION: "yes"
    ports:
      - 2379:2379
    volumes:
      # 数据挂载 - Data mounting
      - /etc/docker/etcd/data:/bitnami
    restart: always
    networks:
      - liujun_net


networks:
  liujun_net:
    driver: bridge

