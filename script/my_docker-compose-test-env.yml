version: '3'

# 本地容器



services:

  #etcd容器 - Etcd container
  etcd:
    image: bitnami/etcd:3.4.27
    container_name: etcd
    environment:
      ALLOW_NONE_AUTHENTICATION: "yes"
    #      ETCD_ADVERTISE_CLIENT_URLS: http://etcd-server:8090
    ports:
      - 8090:2379
    restart: always
    networks:
      - liujun_net

  #prometheus监控 — Prometheus for monitoring
  prometheus:
    image: bitnami/prometheus:2.46.0
    container_name: prometheus
    restart: always
    user: root
    ports:
      - 8091:9090
    networks:
      - liujun_net

  #查看prometheus监控数据 - Grafana to view Prometheus monitoring data
  grafana:
    image: grafana/grafana:8.0.6
    container_name: grafana
    hostname: grafana
    user: root
    restart: always
    ports:
      - 8092:3000
    networks:
      - liujun_net
    depends_on:
      - prometheus


  #redis容器 - Redis container
  #  redis:
  #    image: redis:7.2-rc
  #    container_name: redis
  #    ports:
  #      - 8094:8093
  #    command: "redis-server --requirepass liujun  --appendonly yes"
  #    privileged: true
  #    restart: always
  #    networks:
  #      - liujun_net




  # nginx网关 - Nginx gateway
  nginx:
    image: nginx:stable-alpine3.17
    container_name: nginx
    ports:
      - 9000:80
    volumes:
      - ./conf/nginx_conf/nginx.conf:/etc/nginx/nginx.conf
      - ./conf/nginx_conf/conf.d:/etc/nginx/conf.d
      - ./conf/nginx_conf/log:/var/log/nginx
    restart: always
    networks:
      - liujun_net


  #  kafka:
  #    image: 'bitnami/kafka:3.5.1'
  #    networks:
  #      - liujun_net
  #    container_name: kafka
  #    ports:
  #      - '8095:9092'
  #    volumes:
  #      - ./data/kafka:/bitnami/kafka
  #    environment:
  #      # KRaft settings
  #      KAFKA_CFG_NODE_ID: 0 # Kafka Broker ID
  #      KAFKA_CFG_PROCESS_ROLES: broker,controller # Kafka进程角色，包括broker和controller
  #      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 0@kafka:9093 # Controller选举投票配置
  #
  #      # Listeners
  #      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093
  #      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://:9092 #宿主机IP
  #      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
  #      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER # Controller监听器名称
  #      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: PLAINTEXT # Broker之间通信使用的监听器名称


  kafka-1:
    image: 'bitnami/kafka:3.5.1'
    networks:
      - liujun_net
    container_name: kafka-1
    ports:
      - '9092:9092'
    #    volumes:
    #      - ./data/kafka/node-1:/bitnami/kafka
    environment:
      ALLOW_PLAINTEXT_LISTENER: yes # 允许明文监听器
      KAFKA_ENABLE_KRAFT: yes # 启用Kraft模式
      KAFKA_KRAFT_CLUSTER_ID: MTIzNDU2Nzg5MGFiY2RlZg # Kafka Kraft集群ID
      KAFKA_CFG_PROCESS_ROLES: broker,controller # Kafka进程角色，包括broker和controller
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER # Controller监听器名称
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: BROKER:PLAINTEXT,CONTROLLER:PLAINTEXT # 监听器安全协议映射
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 1@kafka-1:9091,2@kafka-2:9091,3@kafka-3:9091 # Controller选举投票配置
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: BROKER # Broker之间通信使用的监听器名称
      KAFKA_CFG_NODE_ID: 1 # Kafka Broker ID
      KAFKA_CFG_LISTENERS: CONTROLLER://:9091,BROKER://:9092 # 监听器配置
      KAFKA_CFG_ADVERTISED_LISTENERS: BROKER://localhost:9092 #宿主机IP

      # 生产环境关闭自动创建topic
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: true

  kafka-2:
    image: 'bitnami/kafka:3.5.1'
    networks:
      - liujun_net
    container_name: kafka-2
    ports:
      - '9093:9093'
    #    volumes:
    #      - ./data/kafka/node-2:/bitnami/kafka
    environment:
      ALLOW_PLAINTEXT_LISTENER: yes # 允许明文监听器
      KAFKA_ENABLE_KRAFT: yes # 启用Kraft模式
      KAFKA_KRAFT_CLUSTER_ID: MTIzNDU2Nzg5MGFiY2RlZg # Kafka Kraft集群ID
      KAFKA_CFG_PROCESS_ROLES: broker,controller # Kafka进程角色，包括broker和controller
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER # Controller监听器名称
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: BROKER:PLAINTEXT,CONTROLLER:PLAINTEXT # 监听器安全协议映射
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 1@kafka-1:9091,2@kafka-2:9091,3@kafka-3:9091 # Controller选举投票配置
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: BROKER # Broker之间通信使用的监听器名称

      KAFKA_CFG_NODE_ID: 2
      KAFKA_CFG_LISTENERS: CONTROLLER://:9091,BROKER://:9093
      KAFKA_CFG_ADVERTISED_LISTENERS: BROKER://localhost:9093 #宿主机IP
      # 生产环境关闭自动创建topic
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: true

  kafka-3:
    image: 'bitnami/kafka:3.5.1'
    networks:
      - liujun_net
    container_name: kafka-3
    #    volumes:
    #      - ./data/kafka/node-3:/bitnami/kafka
    ports:
      - '9094:9094'
    environment:
      ALLOW_PLAINTEXT_LISTENER: yes # 允许明文监听器
      KAFKA_ENABLE_KRAFT: yes # 启用Kraft模式
      KAFKA_KRAFT_CLUSTER_ID: MTIzNDU2Nzg5MGFiY2RlZg # Kafka Kraft集群ID
      KAFKA_CFG_PROCESS_ROLES: broker,controller # Kafka进程角色，包括broker和controller
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER # Controller监听器名称
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: BROKER:PLAINTEXT,CONTROLLER:PLAINTEXT # 监听器安全协议映射
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 1@kafka-1:9091,2@kafka-2:9091,3@kafka-3:9091 # Controller选举投票配置
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: BROKER # Broker之间通信使用的监听器名称
      KAFKA_CFG_NODE_ID: 3
      KAFKA_CFG_LISTENERS: CONTROLLER://:9091,BROKER://:9094
      KAFKA_CFG_ADVERTISED_LISTENERS: BROKER://localhost:9094 #宿主机IP
      # 生产环境关闭自动创建topic
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: true


  #broker only
  kafka-4:
    image: 'bitnami/kafka:3.5.1'
    networks:
      - liujun_net
    container_name: kafka-4
    #    volumes:
    #      - ./data/kafka/node-4:/bitnami/kafka
    ports:
      - '9095:9095'
    environment:
      ALLOW_PLAINTEXT_LISTENER: yes # 允许明文监听器
      KAFKA_ENABLE_KRAFT: yes # 启用Kraft模式
      KAFKA_KRAFT_CLUSTER_ID: MTIzNDU2Nzg5MGFiY2RlZg # Kafka Kraft集群ID
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER # Controller监听器名称
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: BROKER:PLAINTEXT,CONTROLLER:PLAINTEXT # 监听器安全协议映射
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 1@kafka-1:9091,2@kafka-2:9091,3@kafka-3:9091 # Controller选举投票配置
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: BROKER # Broker之间通信使用的监听器名称
      KAFKA_CFG_NODE_ID: 4 # Kafka Broker ID
      KAFKA_CFG_PROCESS_ROLES: broker # Kafka进程角色，包括broker和controller
      KAFKA_CFG_LISTENERS: BROKER://:9095 # 监听器配置
      KAFKA_CFG_ADVERTISED_LISTENERS: BROKER://localhost:9095 #宿主机IP
      # 生产环境关闭自动创建topic
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: true





  redis-master:
    container_name: redis-master
    image: redis:7.0.11-alpine
    hostname: redis-master
    networks:
      - liujun_net
    restart: always
    ports:
      - "8093:8093"
    logging:
      driver: json-file
      options:
        max-size: 100m
        max-file: '3'
#    volumes:
#      - ./data/redisData/master:/data
    command:
      - "redis-server"
      - "--port"
      - "8093"
#      - --bind
#      - "0.0.0.0"
#      - --port
#      - "8093"
      - "--requirepass"
      - "liujun"
      - "--appendonly"
      - "yes"
      - "--protected-mode"
      - "no"
      - "--daemonize"
      - "no"

  redis-slave1:
    container_name: redis-slave1
    image: redis:7.0.11-alpine
    networks:
      - liujun_net
    hostname: redis-slave1
    restart: always
    ports:
      - "8094:8094"
    logging:
      driver: json-file
      options:
        max-size: 100m
        max-file: '3'
#    volumes:
#      - ./data/redisData/slaver1:/data
    command:
      - "redis-server"
      - "--slaveof"
      - "127.0.0.1 8093"
      - "--port"
      - "8094"
#      - --bind
#      - "0.0.0.0"
#      - --port
#      - "8093"
      - "--requirepass"
      - "liujun"
      - "--masterauth"
      - "liujun"
      - "--appendonly"
      - "yes"
      - "--protected-mode"
      - "no"
      - "--daemonize"
      - "no"



  redis-slave2:
    container_name: redis-slave2
    image: redis:7.0.11-alpine
    hostname: redis-slave2
    networks:
      - liujun_net
    restart: always
    ports:
      - "8095:8095"
    logging:
      driver: json-file
      options:
        max-size: 100m
        max-file: '3'
#    volumes:
#      - ./data/redisData/slaver2:/data
    command:
      - "redis-server"
      - "--slaveof"
      - "127.0.0.1 8093"
      - "--port"
      - "8095"
#      - --bind
#      - "0.0.0.0"
#      - --port
#      - "8093"
      - "--requirepass"
      - "liujun"
      - "--masterauth"
      - "liujun"
      - "--appendonly"
      - "yes"
      - "--protected-mode"
      - "no"
      - "--daemonize"
      - "no"

networks:
  liujun_net:
    driver: bridge

